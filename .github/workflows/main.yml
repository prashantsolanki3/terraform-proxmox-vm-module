# This is a basic workflow to help you get started with Actions

name: Lint and create release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3.0.0
        with:
          # TFLint version to install
          tflint_version: latest
          # GitHub token - used when getting the latest version of tflint
          github_token: ${{ github.token }}
      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact

      - name: Get latest release version
        id: get-release
        run: |
          # Make a GET request to the GitHub API to fetch the latest release
          response=$(curl -sS --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          # Extract the "tag_name" field from the response using jq
          release_version=$(echo "$response" | jq -r '.tag_name')

          # Store the latest release version as an output variable
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV

      - name: Increment version
        id: increment-version
        run: |
          # Extract major, minor, and patch components from the version
          IFS='.' read -ra version_parts <<< "${{ env.RELEASE_VERSION }}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          # Increment the patch version
          patch=$((patch + 1))

          # Construct the new version
          new_version="${major}.${minor}.${patch}"

          # Store the incremented version as an output variable
          echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV

      - name: Display latest release version and incremented version
        run: |
          echo "Latest release version: ${{ env.RELEASE_VERSION }}"
          echo "Incremented version: ${{ env.NEW_VERSION }}"

      - name: Get latest commit message
        id: get-commit-message
        run: |
          # Retrieve the latest commit message and store it as an environment variable
          commit_message=$(git log -1 --pretty=format:%s)
          echo "COMMIT_MESSAGE=${commit_message}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            Changes in this Release: ${{ env.COMMIT_MESSAGE }}
          draft: false
          prerelease: false
